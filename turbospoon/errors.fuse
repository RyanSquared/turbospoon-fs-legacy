--- Module for all Turbospoon errors
-- @module turbospoon.errors
local {BaseError} = require("stdlib.error");

--- Thrown if a hashed string does not match a pre-hashed string
-- @param [string] signed_text Text to use for checking validation
-- @param [string] text Text that, when hashed, failed validation
-- @param [string]? digest_method Method used for hashing
class SignerVerificationError implements BaseError {
	__init(signed_text, text, digest_method)=>
		@signed_text, @text, @digest_method = signed_text, text, digest_method;
	__tostring()=> {
		if @digest_method
			return ("%q hashed via %s does not match %q"):format(
					@text, @digest_method, @signed_text);
		else
			return ("%q hashed does not match %q"):format(
					@text, @signed_text);
	}
}

--- Thrown if a route was not found that satisfies the request
-- @param [string] route Requested route
class RouteDoesNotResolveError implements BaseError {
	__init(route, request)=>
		@route, @request = route, request;
	__tostring()=>
		return ("%q: No route found to resolve to path"):format(@route);
}

--- Thrown if a file was not found in the static dir that satisfies the request
-- @param [string] file Requested file
class StaticFileNotFoundError implements BaseError {
	__init(file, request)=>
		@file, @request = file, request;
	__tostring()=>
		return ("%q: File not found in static files"):format(@file);
}
