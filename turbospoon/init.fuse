--- turbospoon - A FusionScript web application framework
-- @module turbospoon
local {File, FileNotFoundError} = require("stdlib.io");
local {Try, assert} = require("stdlib.error");

local socket = require("cqueues.socket");
local headers = require("http.headers");
local server = require("http.server");
local context = require("openssl.ssl.context");
local pkey = require("openssl.pkey");
local x509 = require("openssl.x509");

local {Signer} = require("turbospoon.session");
local {SignerVerificationError,
		RouteDoesNotResolveError,
		StaticFileNotFoundError} = require("turbospoon.errors");
local {html_response} = require("turbospoon.response");

_ENV = setmetatable({}, {__index = _G});

--- Provide an interface to transfer data to and from a client.
-- @param [http.stream] stream Data stream from lua-http, to be wrapped
class Request {
	__init(stream)=> {
		@stream = stream;
		@headers = {};
		for (k, v in stream:get_headers():each())
			@headers[k] = v;
		@method = @headers[":path"];
	}
}

--- Create a Turbospoon application.
class App {
	__init()=> {
		-- Mechanism for signing data
		File("/dev/random"):with(\file-> {
			@secret_key = file:read(24);
		});
		@signer = Signer(@secret_key);

		-- Configuration and data storage
		@config = {
			static_dir = "static"
		};
		@handlers = setmetatable({}, {__index = App.handlers});

		-- Routing information
		@routes = {};
		@errorhandlers = setmetatable({}, {__index = App.errorhandlers});

		-- Add static route
		@route("/static/(.+)", \request, file-> {
			local ok, err = pcall(\-> {
				file = File(("./%s/%s"):format(@config.static_dir, file));
				content = file:read("a");
				file:close();
				return content;
			});
			if (! ok) {
				if (== err.__class FileNotFoundError) {
					error(StaticFileNotFoundError(file, request));
				}
				error(err);
			}
		});
	}

	--- Call a handler for a key and set an appropriate config value.
	-- @param [string] key
	-- @param [*] value
	set(key, value)=> {
		if @handlers[key]
			@handlers[key](self, value);
		@config[key] = value;
	}

	--- Register a callback to handle configuration changes.
	-- @param [string] key
	-- @param [function] callback
	register_handler(key, callback)=> {
		@handlers[key] = callback;
	}

	--- Map server to an address and port.
	-- @param [string] host Hostname for server to listen on. Set this to;
	-- '0.0.0.0' or '::' to listen on all available interfaces or '127.0.0.1'
	-- to only listen locally.
	-- @param [number] port Port for server to listen on. Most systems require
	-- this value to be over 1024. Use an iptables redirect if you want to use
	-- port 443 or 80.
	bind(host, port)=> {
		@server = server.new({
			socket = socket.listen(host, port),
			onstream = \server, stream-> {
				@process(stream);
			},
			tls = @config.tls,
			ctx = @tls_ctx,
			max_concurrent = 200
		});
	}

	--- Do something?
	-- @param [class] err Error; *must* have `request` = tbsp.Request
	-- @param [turbospoon.Request] request Request object from client
	-- @private
	handle_error(err, request)=> {
		if (== type(err) "table") {
			local cls = err.__class;
			while cls {
				if @errorhandlers[cls] {
					@flush_response(err.request,
							@errorhandlers[cls](self, err));
					return;
				}
				cls = cls.__super;
			}
		}
		@flush_response(request, html_response(tostring(err), 500));
	}

	--- Subscribe a callback to all requests matching a path.
	-- Routes will be "first-come, first-serve", routes registered earlier
	-- will have priority over routes that register later.
	-- @param [string] path Lua string for matching paths
	-- @param [function] handler Function for processing request
	route(path, handler)=> {
		assert.is(path, "string");
		assert.is(handler, "function");
		table.insert(@routes, {path=path, handler=handler});
	}

	--- Subscribe a callback to handle errors matching a BaseError
	-- @param [class] err Error class to track
	-- @param [function] handler Function for processing error
	error_handler(err, handler)=> {
		assert.is(err, "table");
		assert.is(handler, "function");
		@errorhandlers[err] = handler;
	}

	--- Default headers, to be set automatically when finishing a request.
	default_headers = {
		["content-type"] = "text/plain",
		[":status"] = "200"
	};

	--- Flush out values when given a body, status code, and headers
	-- @param [turbospoon.Request] request Client object
	-- @param [string]? body Body to send to client
	-- @param [string]? status HTTP status code to send to client
	-- @param [table]? headers HTTP headers to send to client
	-- @private
	flush_response(request, body="", status, new_headers)=> {
		-- Generate a new header set
		local response_headers = headers.new();
		-- Default headers
		for (k, v in pairs(@default_headers)) {
			response_headers:upsert(k, v);
		}
		-- Custom headers
		if new_headers
			for (k, v in pairs(new_headers)) {
				response_headers:upsert(k, v);
			}
		-- Custom status
		if status
			response_headers:upsert(":status", tostring(status));
		-- Transmit headers (terminate if in a HEAD method)
		if (== request.headers[':method'] "HEAD") {
			request.stream:write_headers(response_headers, true);
			return;
		} else request.stream:write_headers(response_headers, false);
		request.stream:write_chunk(tostring(body), true);
	}


	--- Find the correct page handler for a URL and process the request.
	-- @param [cqueues.socket] stream Incoming connection to handle
	-- @private
	process(stream)=> {
		local request = Request(stream);
		local ok, err = pcall(\-> {
			local path = request.headers[":path"];
			for (_, route in ipairs(@routes)) {
				if path:match(route.path) {
					-- Get values from processing handler
					-- ::TODO:: catch errors
					@flush_response(request, route.handler(
							request, path:match(route.path)));
				}
			}

			-- No matching route was found
			error(RouteDoesNotResolveError(path, request));
		});
		if (! ok) {
			if (&& (== type(err) "table") err.__class)
				@handle_error(err, request);

		}
	}

	--- Start listening to incoming requests.
	run()=> {
		print(@server:loop());
	}

	handlers = {};
	errorhandlers = {};
}

--- Load a certificate from a file, making a new TLS context if needed.
App:register_handler("certfile", \certfile=> {
	File(certfile):with(\file-> {
		if (!@tls_ctx)
			@tls_ctx = context.new("TLS", true);
		@tls_ctx:setCertificate(x509.new(file:read("a"), "PEM"));
		-- please for the love of God, don't use anything other than PEM, I'm
		-- not smart enough to implement anything else yet ::TODO::
		@config.tls = true;
	});
});

--- Load a private key from a file, making a new TLS context if needed.
App:register_handler("keyfile", \keyfile=> {
	File(keyfile):with(\file-> {
		if (!@tls_ctx)
			@tls_ctx = context.new("TLS", true);
		@tls_ctx:setPrivateKey(pkey.new(file:read("*a"), "PEM"));
		-- read above TODO as for doing custom file types
		@config.tls = true;
	});
});

App:error_handler(RouteDoesNotResolveError, \err=> {
	local text = "<h1>%s</h1>";
	return html_response(text:format(tostring(err)), 404);
});

App:error_handler(StaticFileNotFoundError, \err=> {
	local text = "<h1>%s</h1>";
	return html_response(text:format(tostring(err)), 404);
});

return _ENV;
